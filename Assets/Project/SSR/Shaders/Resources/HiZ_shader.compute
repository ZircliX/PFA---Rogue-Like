// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel DepthCopy
#pragma kernel DebugEdit
#pragma kernel DebugCopyScale
#pragma kernel DebugApplyBorders
#define THREADS 8


/////////////////////RUNTIME CODE////////////////////////
float _SSRGlobalInvScale;
uint2 _SourceSize;
uint2 _DestinationSize;
uint2 _ScreenSize;
uint _SourceSlice;
uint _DestinationSlice;
//bool extraSampleX;
//bool extraSampleY;

RWTexture2DArray<float> _DepthPyramidTextureArray;
Texture2D<float> _CameraDepthTexture;

inline float SampleDepth(uint3 pos)
{
    return _DepthPyramidTextureArray[uint3(min(pos.xy, float2(_SourceSize.x - 1, _SourceSize.y - 1)), pos.z)];
}

[numthreads(THREADS, THREADS, 1)]
void DepthCopy(uint3 id : SV_DispatchThreadID)
{
    [branch]
    if (id.x >= _ScreenSize.x || id.y >= _ScreenSize.y)
    {
        return;
    }
    _DepthPyramidTextureArray[uint3(id.xy, 0)] = _CameraDepthTexture[id.xy * _SSRGlobalInvScale];
}

[numthreads(THREADS, THREADS, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    [branch]
    if (id.x >= _ScreenSize.x || id.y >= _ScreenSize.y)
    {
        return;
    }
    float minValue = -1;
    float2 prevPos = id.xy << 1;
    uint3 prevId = uint3(prevPos.xy, _SourceSlice);

    uint3 o1 = prevId + uint3(1, 0, 0);
    uint3 o2 = prevId + uint3(1, 1, 0);
    uint3 o3 = prevId + uint3(0, 1, 0);

    float d0 = _DepthPyramidTextureArray[prevId];
    float d1 = SampleDepth(o1);
    float d2 = SampleDepth(o2);
    float d3 = SampleDepth(o3);
    //minValue = min(min(d0, d1), min(d2, d3));
    minValue =  max(max(d0, d1), max(d2, d3));

    _DepthPyramidTextureArray[uint3(id.xy, _DestinationSlice)] = minValue;
}


/////////////////////DEBUGGING CODE////////////////////////
float low;
float high;

[numthreads(THREADS, THREADS, 1)]
void DebugEdit(uint3 id : SV_DispatchThreadID)
{
    float r = _DepthPyramidTextureArray[uint3(id.xy, _DestinationSlice)];
    r = smoothstep(low, high, r);
    _DepthPyramidTextureArray[uint3(id.xy, _DestinationSlice)] = r;
}

[numthreads(THREADS, THREADS, 1)]
void DebugCopyScale(uint3 id : SV_DispatchThreadID)
{
    uint2 o0 = uint2(0, 1);
    uint2 o1 = uint2(1, 0);

    uint2 pos = id.xy >> _DestinationSlice;

    float r = _DepthPyramidTextureArray[uint3(pos, _DestinationSlice)];

    float r0 = _DepthPyramidTextureArray[uint3(pos + o1, _DestinationSlice)];
    float r1 = _DepthPyramidTextureArray[uint3(pos - o1, _DestinationSlice)];
    float xDiff = abs(r0 - r1);

    float r2 = _DepthPyramidTextureArray[uint3(pos + o0, _DestinationSlice)];
    float r3 = _DepthPyramidTextureArray[uint3(pos - o0, _DestinationSlice)];
    float yDiff = abs(r2 - r3);

    _DepthPyramidTextureArray[uint3(id.xy, 0)] = r;
}

[numthreads(THREADS, THREADS, 1)]
void DebugApplyBorders(uint3 id : SV_DispatchThreadID)
{
    uint2 o0 = uint2(0, 1);
    uint2 o1 = uint2(1, 0);

    uint2 pos = id.xy;

    float r = _DepthPyramidTextureArray[uint3(pos, 0)];

    float r0 = _DepthPyramidTextureArray[uint3(pos + o1, 0)];
    float r1 = _DepthPyramidTextureArray[uint3(pos - o1, 0)];
    float xDiff = abs(r0 - r1);

    float r2 = _DepthPyramidTextureArray[uint3(pos + o0, 0)];
    float r3 = _DepthPyramidTextureArray[uint3(pos - o0, 0)];
    float yDiff = abs(r2 - r3);

    float t = 1;
    if (yDiff > 0 || xDiff > 0)
    {
        t = 0;
    }
    _DepthPyramidTextureArray[uint3(pos, 0)] = r * t;
}
